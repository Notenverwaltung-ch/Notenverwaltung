name: CI Build and Release

on:
  push:
    branches:
      - main
      - master
      - develop
      - feature/**
    tags: [ '*' ]
  pull_request:
    branches:
      - main
      - master
      - develop
      - feature/**

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Run tests
        run: ./gradlew test

      - name: Upload build artifacts (JAR)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: |
            build/libs/*.jar

  docker:
    name: Build and push Docker image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute docker tags
        id: dtags
        run: |
          REPO="ghcr.io/${GITHUB_REPOSITORY,,}"
          SHORT_SHA=${GITHUB_SHA::7}
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          TAGS=""
          PUSH=false
          if [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
            # Use the tag name as docker tag (no leading 'v' assumed)
            TAGS+="$REPO:${GITHUB_REF_NAME}"
            PUSH=true
          elif [[ "$GITHUB_REF_TYPE" == "branch" && "$GITHUB_REF_NAME" == feature/* ]]; then
            SAFE_BRANCH=${GITHUB_REF_NAME//\//-}
            TAGS+="$REPO:${SAFE_BRANCH}-${SHORT_SHA}"
          else
            SAFE_REF=${GITHUB_REF_NAME//\//-}
            TAGS+="$REPO:${SAFE_REF}-${SHORT_SHA}"
          fi
          # docker/build-push-action accepts newline or comma separated list
          # Use newline to be safe. Use proper heredoc to avoid echo -e pitfalls.
          {
            echo "tags<<EOF"
            echo "$TAGS"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          echo "push=$PUSH" >> $GITHUB_OUTPUT
          if [[ "$PUSH" == "true" && -z "$TAGS" ]]; then
            echo "[ERROR] Push requested but no docker tags were computed" >&2
            exit 1
          fi
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs

      - name: Normalize JAR filename and verify presence
        run: |
          mkdir -p build/libs
          shopt -s nullglob
          JAR_CANDIDATES=(build/libs/*.jar build/libs/build/libs/*.jar)
          COUNT=${#JAR_CANDIDATES[@]}
          if [ "$COUNT" -eq 0 ]; then
            find build -maxdepth 3 -type f -name "*.jar" -print || true
            exit 1
          fi
          SRC_JAR="${JAR_CANDIDATES[0]}"
          cp "$SRC_JAR" build/libs/app.jar
          cp build/libs/app.jar ./app.jar
        shell: bash

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: ${{ steps.dtags.outputs.push == 'true' }}
          tags: ${{ steps.dtags.outputs.tags }}

      - name: How to pull and run the image
        if: ${{ steps.dtags.outputs.push == 'true' }}
        run: |
          echo "Docker image pushed to GHCR."
          echo ""
          echo "Repository: ghcr.io/${GITHUB_REPOSITORY,,}"
          echo ""
          echo "Pull and run commands for all tags:"
          while IFS= read -r tag; do
            [ -n "$tag" ] || continue
            echo "  docker pull $tag"
            echo "  docker run --rm -p 8080:8080 $tag"
          done <<< "${{ steps.dtags.outputs.tags }}"
          echo ""
          echo "If needed, authenticate with GHCR first:"
          echo "  echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin"
        shell: bash


  latex:
    name: Build and release documentation PDF
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build PDF with latex-action
        uses: xu-cheng/latex-action@v3
        with:
          root_file: documentation.tex
          working_directory: documentation
          latexmk_use_lualatex: false
          latexmk_use_xelatex: false
          extra_system_packages: ghostscript
          args: -pdf -interaction=nonstopmode -halt-on-error -file-line-error
          pre_compile: |
            tlmgr update --self || true
            tlmgr install microtype ltablex ragged2e xurl listingsutf8 babel-german array || true

      - name: Upload PDF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-pdf
          path: documentation/documentation.pdf


      - name: Create GitHub Release (tags only)
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && github.ref_type == 'tag'
        with:
          files: |
            documentation/documentation.pdf
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
