name: Create version tag if missing (including dev prereleases)

on:
  push:
    branches: [ main, master, develop ]

jobs:
  ensure-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine next tag
        id: v
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          LAST=$(git tag --list 'v*.*.*' --sort=-v:refname | head -n1)
          if [ -z "$LAST" ]; then
            BASE_MAJOR=0
            BASE_MINOR=1
            BASE_PATCH=0
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST#v}"
            BASE_MAJOR=$MAJOR
            BASE_MINOR=$MINOR
            BASE_PATCH=$PATCH
          fi

          if [ "$BRANCH" = "develop" ]; then
            # For develop, create a prerelease tag based on the next minor version with beta identifier
            NEXT_MINOR=$((BASE_MINOR+1))
            DATE=$(date +"%Y%m%d")
            SHA7=${GITHUB_SHA::7}
            echo "next=v${BASE_MAJOR}.${NEXT_MINOR}.0-beta.${DATE}-${SHA7}" >> $GITHUB_OUTPUT
          else
            # For main/master, bump patch version for a regular release tag
            NEXT_PATCH=$((BASE_PATCH+1))
            echo "next=v${BASE_MAJOR}.${BASE_MINOR}.${NEXT_PATCH}" >> $GITHUB_OUTPUT
          fi

      - name: Create tag if this push is not a tag
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ steps.v.outputs.next }}
          git push origin ${{ steps.v.outputs.next }}
