name: Build & Tag with Shared Version

on: [push]

jobs:
  compute-version:
    name: Compute Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      base: ${{ steps.version.outputs.base }}
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version from Gradle and compute patch
        id: version
        shell: bash
        run: |
          set -euo pipefail
          # Read major.minor from build.gradle.kts (version = "X.Y")
          BASE_VERSION=$(grep -E '^version\s*=\s*"[0-9]+\.[0-9]+"' build.gradle.kts | sed -E 's/.*"([0-9]+\.[0-9]+)"/\1/')
          if [ -z "$BASE_VERSION" ]; then
            echo "Could not determine base version from build.gradle.kts" >&2
            exit 1
          fi
          echo "Base version: $BASE_VERSION"

          BRANCH_NAME="${GITHUB_REF_NAME}"
          SHORT_SHA=$(git rev-parse --short HEAD)

          # Ensure we have all tags
          git fetch --tags --force

          # Find highest patch for tags like BASE_VERSION.Z without suffix
          HIGHEST_PATCH=$(git tag --list "${BASE_VERSION}.*" | grep -E "^${BASE_VERSION}\\.[0-9]+$" | sed -E "s/^${BASE_VERSION}\.([0-9]+)/\1/" | sort -n | tail -n1 || true)
          if [ -z "${HIGHEST_PATCH:-}" ]; then
            HIGHEST_PATCH=-1
          fi

          NEXT_PATCH=$((HIGHEST_PATCH + 1))

          if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "main" ]; then
            VERSION="${BASE_VERSION}.${NEXT_PATCH}"
          else
            VERSION="${BASE_VERSION}.${NEXT_PATCH}-${SHORT_SHA}"
          fi

          echo "Computed version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "base=$BASE_VERSION" >> "$GITHUB_OUTPUT"

  build-and-tag:
    name: Tag, Build, Test, & Upload
    needs: compute-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Create and push tag
        env:
          VERSION: ${{ needs.compute-version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          if git rev-parse -q --verify "refs/tags/${VERSION}" >/dev/null; then
            echo "Tag ${VERSION} already exists. Skipping tag creation."
          else
            git tag -a "$VERSION" -m "Automated version tag $VERSION"
            git push origin "$VERSION"
          fi

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Run tests
        run: ./gradlew test

      - name: Locate built jars and prepare artifact name
        id: jars
        env:
          VERSION: ${{ needs.compute-version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p upload
          for f in build/libs/*.jar; do
            base="notenverwaltung-${VERSION}"
            if [[ "$f" =~ (-plain|-sources|-javadoc)\.jar$ ]]; then
              classifier=$(echo "$f" | sed -E 's/.*(-plain|-sources|-javadoc)\.jar/\1/')
              cp "$f" "upload/${base}${classifier}.jar"
            else
              cp "$f" "upload/${base}.jar"
            fi
          done
          echo "dir=upload" >> "$GITHUB_OUTPUT"

      - name: Upload jars artifact
        uses: actions/upload-artifact@v4
        with:
          name: notenverwaltung-${{ needs.compute-version.outputs.version }}
          path: ${{ steps.jars.outputs.dir }}

  latex:
    name: Build documentation PDF
    needs: compute-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build PDF with latex-action
        uses: xu-cheng/latex-action@v3
        with:
          root_file: documentation.tex
          working_directory: documentation
          latexmk_use_lualatex: false
          latexmk_use_xelatex: false
          extra_system_packages: ghostscript
          args: -pdf -interaction=nonstopmode -halt-on-error -file-line-error
          pre_compile: |
            tlmgr update --self || true
            tlmgr install microtype ltablex ragged2e xurl listingsutf8 babel-german array || true
      - name: Prepare version-suffixed PDF
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          SRC="documentation/documentation.pdf"
          if [ ! -f "$SRC" ]; then
            echo "PDF not found: $SRC" >&2
            ls -al documentation || true
            exit 1
          fi
          cp "$SRC" "documentation/notenverwaltung-documentation-${{ needs.compute-version.outputs.version }}.pdf"

      - name: Upload PDF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: notenverwaltung-documentation-${{ needs.compute-version.outputs.version }}
          path: documentation/notenverwaltung-documentation-${{ needs.compute-version.outputs.version }}.pdf
