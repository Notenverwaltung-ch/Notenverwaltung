{
  "openapi": "3.0.1",
  "info": {
    "title": "Notenverwaltung API",
    "description": "API for authentication and managing users, semesters, subjects, classes and tests. Most endpoints require a Bearer JWT. Public endpoints are under /public and /public/auth. Swagger UI is available at /api/public/docs.",
    "version": "v1"
  },
  "servers": [
    {
      "url": "http://localhost:8080/api",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Semester-Subjects",
      "description": "Endpoints to manage and query semester-subject assignments"
    },
    {
      "name": "Authentication",
      "description": "Endpoints for user authentication and registration"
    },
    {
      "name": "Subjects",
      "description": "Endpoints to manage and query subjects"
    },
    {
      "name": "Semesters",
      "description": "Endpoints to manage and query semesters"
    },
    {
      "name": "Classes",
      "description": "Endpoints to manage and query classes"
    },
    {
      "name": "Tests",
      "description": "Endpoints to manage tests"
    },
    {
      "name": "User Management",
      "description": "Admin-only endpoints for managing users"
    },
    {
      "name": "Grades",
      "description": "Endpoints to manage grades"
    },
    {
      "name": "Public",
      "description": "Publicly accessible endpoints (no authentication required)"
    },
    {
      "name": "Testdata",
      "description": "Seed database with demo data"
    }
  ],
  "paths": {
    "/tests/{id}": {
      "get": {
        "tags": [
          "Tests"
        ],
        "summary": "Get test by ID",
        "description": "Fetch a single test by UUID. Returns 404 if not found.",
        "operationId": "getById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDTO"
                }
              }
            }
          },
          "404": {
            "description": "Test not found"
          }
        }
      },
      "put": {
        "tags": [
          "Tests"
        ],
        "summary": "Update a test",
        "description": "Updates an existing test by UUID. Only ADMINs can update. Returns 404 if not found.",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Test updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Test not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Tests"
        ],
        "summary": "Delete a test",
        "description": "Deletes a test by UUID. Only ADMINs can delete.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Test deleted"
          },
          "404": {
            "description": "Test not found"
          }
        }
      }
    },
    "/subjects/{id}": {
      "get": {
        "tags": [
          "Subjects"
        ],
        "summary": "Get subject by ID",
        "description": "Fetch a single subject by UUID. Accessible to roles: ADMIN, USER.",
        "operationId": "getById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subject UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subject found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectDTO"
                }
              }
            }
          },
          "404": {
            "description": "Subject not found"
          }
        }
      },
      "put": {
        "tags": [
          "Subjects"
        ],
        "summary": "Update a subject",
        "description": "Updates an existing subject by UUID. Accessible to role: ADMIN only.",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subject UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Subject updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Subject not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Subjects"
        ],
        "summary": "Delete a subject",
        "description": "Deletes a subject by UUID. Accessible to role: ADMIN only.",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subject UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subject deleted"
          },
          "404": {
            "description": "Subject not found"
          }
        }
      }
    },
    "/semesters/{id}": {
      "get": {
        "tags": [
          "Semesters"
        ],
        "summary": "Get semester by ID",
        "description": "Fetch a single semester by UUID. Accessible to roles: ADMIN, USER.",
        "operationId": "getById_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Semester UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Semester found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemesterDTO"
                }
              }
            }
          },
          "404": {
            "description": "Semester not found"
          }
        }
      },
      "put": {
        "tags": [
          "Semesters"
        ],
        "summary": "Update a semester",
        "description": "Updates an existing semester by UUID. Accessible to role: ADMIN only.",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Semester UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemesterDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Semester updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemesterDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Semester not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Semesters"
        ],
        "summary": "Delete a semester",
        "description": "Deletes a semester by UUID. Accessible to role: ADMIN only.",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Semester UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Semester deleted"
          },
          "404": {
            "description": "Semester not found"
          }
        }
      }
    },
    "/semester-subjects/{id}": {
      "get": {
        "tags": [
          "Semester-Subjects"
        ],
        "summary": "Get semester-subject by ID",
        "description": "Fetch a single semester-subject by UUID. Accessible to roles: ADMIN, USER.",
        "operationId": "getById_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SemesterSubject UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemesterSubjectDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "Semester-Subjects"
        ],
        "summary": "Update a semester-subject assignment",
        "description": "Updates an existing semester-subject combination by UUID. Accessible to role: ADMIN only.",
        "operationId": "update_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SemesterSubject UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemesterSubjectDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemesterSubjectDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Semester-Subjects"
        ],
        "summary": "Delete a semester-subject assignment",
        "description": "Deletes a semester-subject by UUID. Accessible to role: ADMIN only.",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SemesterSubject UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/grades/{id}": {
      "get": {
        "tags": [
          "Grades"
        ],
        "summary": "Get grade by ID",
        "operationId": "getById_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Grade found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GradeDTO"
                }
              }
            }
          },
          "404": {
            "description": "Grade not found"
          }
        }
      },
      "put": {
        "tags": [
          "Grades"
        ],
        "summary": "Update grade",
        "operationId": "update_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GradeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Grade updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GradeDTO"
                }
              }
            }
          },
          "404": {
            "description": "Grade not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Grades"
        ],
        "summary": "Delete grade",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/classes/{id}": {
      "get": {
        "tags": [
          "Classes"
        ],
        "summary": "Get class by ID",
        "description": "Fetch a single class by UUID. Accessible to roles: ADMIN, USER.",
        "operationId": "getById_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Class UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Class found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassDTO"
                }
              }
            }
          },
          "404": {
            "description": "Class not found"
          }
        }
      },
      "put": {
        "tags": [
          "Classes"
        ],
        "summary": "Update a class",
        "description": "Updates an existing class by UUID. Accessible to role: ADMIN only.",
        "operationId": "update_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Class UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Class updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Class not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Classes"
        ],
        "summary": "Delete a class",
        "description": "Deletes a class by UUID. Accessible to role: ADMIN only.",
        "operationId": "delete_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Class UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Class deleted"
          },
          "404": {
            "description": "Class not found"
          }
        }
      }
    },
    "/admin/users/{username}/password": {
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Change a user's password",
        "description": "Sets a new password for the specified user. The password is stored encoded. Returns 404 if the user does not exist.",
        "operationId": "changePassword",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Password changed"
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/admin/users/{username}/active": {
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Set user active flag",
        "description": "Sets the active flag for the specified user to true or false via query parameter 'active'.",
        "operationId": "setActive",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/tests": {
      "get": {
        "tags": [
          "Tests"
        ],
        "summary": "List all tests (paginated)",
        "description": "Returns a paginated list of tests. Accepts standard Spring Data pagination params: page, size, sort.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page of tests returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tests"
        ],
        "summary": "Create a test",
        "description": "Creates a new test. Only users with ADMIN role can create.",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Test created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/testdata/setup": {
      "post": {
        "tags": [
          "Testdata"
        ],
        "summary": "Create demo data: admin, users, subjects, semesters, classes, tests, grades",
        "operationId": "setup",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subjects": {
      "get": {
        "tags": [
          "Subjects"
        ],
        "summary": "List all subjects (paged)",
        "description": "Returns a paged list of subjects. Use standard Spring Data pageable params: page, size, sort.",
        "operationId": "getAll_1",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page of subjects returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subjects"
        ],
        "summary": "Create a subject",
        "description": "Creates a new subject. Accessible to role: ADMIN only.",
        "operationId": "create_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subject created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/semesters": {
      "get": {
        "tags": [
          "Semesters"
        ],
        "summary": "List all semesters (paged)",
        "description": "Returns a paged list of semesters. Use standard Spring Data pageable params: page, size, sort.",
        "operationId": "getAll_2",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page of semesters returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemesterDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Semesters"
        ],
        "summary": "Create a semester",
        "description": "Creates a new semester. Accessible to role: ADMIN only.",
        "operationId": "create_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemesterDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Semester created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemesterDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/semester-subjects": {
      "get": {
        "tags": [
          "Semester-Subjects"
        ],
        "summary": "List all semester-subject assignments",
        "description": "Returns a list of all semester-subject combinations. Accessible to roles: ADMIN, USER.",
        "operationId": "getAll_3",
        "responses": {
          "200": {
            "description": "List returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemesterSubjectDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Semester-Subjects"
        ],
        "summary": "Create a semester-subject assignment",
        "description": "Creates a new semester-subject combination. Accessible to role: ADMIN only.",
        "operationId": "create_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemesterSubjectDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemesterSubjectDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Semester or Subject not found"
          }
        }
      }
    },
    "/public/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account with default role ROLE_USER and returns a JWT access token. This endpoint is public and does not require a token.",
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed or username taken",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login and retrieve JWT",
        "description": "Authenticates a user with username and password and returns a JWT access token. This endpoint is public and does not require a token.",
        "operationId": "authenticateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/grades": {
      "get": {
        "tags": [
          "Grades"
        ],
        "summary": "List grades",
        "description": "Admins get all grades (paged). Users get only their own grades.",
        "operationId": "getAll_4",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "studentId",
            "in": "query",
            "description": "Filter by studentId (ADMIN only, optional)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "testId",
            "in": "query",
            "description": "Filter by testId (optional)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "valueMin",
            "in": "query",
            "description": "Minimum grade value (optional)",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "valueMax",
            "in": "query",
            "description": "Maximum grade value (optional)",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page of grades returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GradeDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Grades"
        ],
        "summary": "Create grade",
        "operationId": "create_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GradeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Grade created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GradeDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/classes": {
      "get": {
        "tags": [
          "Classes"
        ],
        "summary": "List all classes (paged)",
        "description": "Returns a paged list of classes. Use standard Spring Data pageable params: page, size, sort.",
        "operationId": "getAll_5",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page of classes returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Classes"
        ],
        "summary": "Create a class",
        "description": "Creates a new class. Accessible to role: ADMIN only.",
        "operationId": "create_5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Class created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List users (paged)",
        "description": "Returns a paged list of registered users. Use standard Spring Data pageable params: page, size, sort.",
        "operationId": "getAllUsers",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page of users returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create a new user",
        "description": "Creates a user with the provided username and password. If no roles are provided, the default role ROLE_USER is assigned. Provided roles are normalized to start with ROLE_. Returns 409 if the username already exists.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "409": {
            "description": "Username already exists"
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/admin/users/{username}/roles": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Grant a role to a user",
        "description": "Grants the specified role to the user. Role values are normalized to the ROLE_ prefix. Granting an existing role is idempotent.",
        "operationId": "grantRole",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role granted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/public/health": {
      "get": {
        "tags": [
          "Public"
        ],
        "summary": "Health check",
        "description": "Simple public health endpoint indicating the service status. Accessible to everyone (no role required).",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "Service is up",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/grades/user/{userId}": {
      "get": {
        "tags": [
          "Grades"
        ],
        "summary": "List grades for a specific user",
        "description": "Admins can fetch grades for any user. Regular users can only fetch their own grades.",
        "operationId": "getGradesForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page of grades returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GradeDTO"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden for non-owners",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageGradeDTO"
                }
              }
            }
          }
        }
      }
    },
    "/grades/semester": {
      "get": {
        "tags": [
          "Grades"
        ],
        "summary": "Get grades for a semester (optionally for one student)",
        "description": "Returns, for the given semester, for each student (or a specific student if studentId is provided): all individual grades per subject, the calculated weighted grade per subject, and the overall weighted average.",
        "operationId": "getSemesterGrades",
        "parameters": [
          {
            "name": "semesterId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "studentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StudentSemesterResultDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/users/active": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List active users (paged)",
        "description": "Returns a paged list of users with active=true. Use standard Spring Data pageable params: page, size, sort.",
        "operationId": "getActiveUsers",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page of active users returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users/{username}": {
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Delete a user",
        "description": "Deletes the specified user by username. Returns 204 if deleted, 404 if not found.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/admin/users/{username}/roles/{role}": {
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Revoke a role from a user",
        "description": "Revokes the specified role from the user. Role values are normalized to the ROLE_ prefix. Revoking a role the user doesn't have is idempotent.",
        "operationId": "revokeRole",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TestDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "semesterSubjectId": {
            "type": "string",
            "format": "uuid"
          },
          "classId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "SubjectDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SemesterDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "SemesterSubjectDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "semesterId": {
            "type": "string",
            "format": "uuid"
          },
          "subjectId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GradeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "number"
          },
          "weight": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "studentId": {
            "type": "string",
            "format": "uuid"
          },
          "testId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ClassDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "semesterSubjectId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ChangePasswordRequest": {
        "required": [
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "newPassword": {
            "maxLength": 2147483647,
            "minLength": 6,
            "type": "string"
          }
        }
      },
      "GrantedAuthority": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "enabled": {
            "type": "boolean"
          },
          "authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantedAuthority"
            }
          },
          "accountNonLocked": {
            "type": "boolean"
          },
          "accountNonExpired": {
            "type": "boolean"
          },
          "credentialsNonExpired": {
            "type": "boolean"
          }
        }
      },
      "AuthResponseDTO": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          }
        }
      },
      "UserRegistrationDTO": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string"
          },
          "password": {
            "maxLength": 2147483647,
            "minLength": 6,
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "AuthRequestDTO": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "AdminCreateUserRequest": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string"
          },
          "password": {
            "maxLength": 2147483647,
            "minLength": 6,
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RoleRequest": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PageGradeDTO": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GradeDTO"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          }
        }
      },
      "GradeItemDTO": {
        "type": "object",
        "properties": {
          "gradeId": {
            "type": "string",
            "format": "uuid"
          },
          "testId": {
            "type": "string",
            "format": "uuid"
          },
          "testName": {
            "type": "string"
          },
          "testDate": {
            "type": "string",
            "format": "date"
          },
          "value": {
            "type": "number"
          },
          "weight": {
            "type": "number"
          },
          "gradeComment": {
            "type": "string"
          }
        }
      },
      "StudentSemesterResultDTO": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "string",
            "format": "uuid"
          },
          "studentFirstName": {
            "type": "string"
          },
          "studentLastName": {
            "type": "string"
          },
          "overallGrade": {
            "type": "number"
          },
          "subjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubjectResultDTO"
            }
          }
        }
      },
      "SubjectResultDTO": {
        "type": "object",
        "properties": {
          "subjectId": {
            "type": "string",
            "format": "uuid"
          },
          "subjectName": {
            "type": "string"
          },
          "calculatedGrade": {
            "type": "number"
          },
          "grades": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GradeItemDTO"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}